import asyncio
import sqlite3
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    ReplyKeyboardMarkup, 
    KeyboardButton,
    InlineKeyboardMarkup, 
    InlineKeyboardButton
)
from aiogram.fsm.state import State, StatesGroup
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ —Å –≤–∞—à–∏–º —Ç–æ–∫–µ–Ω–æ–º
bot = Bot(
    token="8058786269:AAFbIQvaaP_7IE0kvhq93Es8KNdZ0-1bxgQ",
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('gifts.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    name TEXT,
    partner_id INTEGER
)''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS gifts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    name TEXT,
    description TEXT,
    link TEXT,
    photo_id TEXT,
    FOREIGN KEY (user_id) REFERENCES users (user_id)
)''')
conn.commit()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã
def main_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üéÅ –ú–æ–π —Å–ø–∏—Å–æ–∫"), KeyboardButton(text="üëÄ –°–ø–∏—Å–æ–∫ –ª—é–±–∏–º–∫–∏")],
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫"), KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫")]
        ],
        resize_keyboard=True
    )

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class AddGift(StatesGroup):
    name = State()
    description = State()
    link = State()
    photo = State()

class AddPartner(StatesGroup):
    waiting = State()

# ===== –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ =====
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = message.from_user.id
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    if not cursor.fetchone():
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    else:
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    help_text = """
<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/help - –ü–æ–º–æ—â—å
/connect - –î–æ–±–∞–≤–∏—Ç—å –ª—é–±–∏–º–∫—É

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏:</b>
üéÅ –ú–æ–π —Å–ø–∏—Å–æ–∫ - –í–∞—à–∏ –ø–æ–¥–∞—Ä–∫–∏
üëÄ –°–ø–∏—Å–æ–∫ –ª—é–±–∏–º–∫–∏ - –ü–æ–¥–∞—Ä–∫–∏ –≤–∞—à–µ–π –ª—é–±–∏–º–∫–∏
‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ - –ù–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫
‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫ - –£–¥–∞–ª–µ–Ω–∏–µ
"""
    await message.answer(help_text)

# ===== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø =====
@dp.message(lambda message: not is_user_registered(message.from_user.id))
async def register_user(message: types.Message):
    user_id = message.from_user.id
    name = message.text
    
    cursor.execute("INSERT INTO users (user_id, name) VALUES (?, ?)", (user_id, name))
    conn.commit()
    
    await message.answer(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ, {name}! –¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ —Å–≤–æ—é –ª—é–±–∏–º–∫—É —á–µ—Ä–µ–∑ /connect")
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())

# ===== –°–ò–°–¢–ï–ú–ê –ü–ê–†–¢–ù–ï–†–û–í =====
@dp.message(Command("connect"))
async def connect_partner(message: types.Message, state: FSMContext):
    await state.set_state(AddPartner.waiting)
    await message.answer("üîë –ü–æ–ø—Ä–æ—Å–∏—Ç–µ –≤–∞—à—É –ª—é–±–∏–º–∫—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /connect")

@dp.message(Command("connect"), AddPartner.waiting)
async def confirm_partner(message: types.Message, state: FSMContext):
    user1_id = message.from_user.id
    cursor.execute("SELECT user_id FROM users WHERE partner_id IS NULL AND user_id != ?", (user1_id,))
    partner = cursor.fetchone()
    
    if partner:
        user2_id = partner[0]
        cursor.execute("UPDATE users SET partner_id = ? WHERE user_id = ?", (user2_id, user1_id))
        cursor.execute("UPDATE users SET partner_id = ? WHERE user_id = ?", (user1_id, user2_id))
        conn.commit()
        
        await message.answer("‚úÖ –í–∞—à–∞ –ª—é–±–∏–º–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
        try:
            await bot.send_message(user2_id, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω—ã —Å–æ —Å–≤–æ–∏–º –ø–∞—Ä—Ç–Ω–µ—Ä–æ–º!")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        
        await state.clear()
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_keyboard())
    else:
        await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–≤—è–∑–∏")

# ===== –†–ê–ë–û–¢–ê –° –ü–û–î–ê–†–ö–ê–ú–ò =====
@dp.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫")
async def add_gift_start(message: types.Message, state: FSMContext):
    await state.set_state(AddGift.name)
    await message.answer("üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥–∞—Ä–∫–∞:")

@dp.message(AddGift.name)
async def add_gift_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(AddGift.description)
    await message.answer("üí¨ –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–∏–ª–∏ /skip):")

@dp.message(AddGift.description)
async def add_gift_desc(message: types.Message, state: FSMContext):
    if message.text != "/skip":
        await state.update_data(description=message.text)
    await state.set_state(AddGift.link)
    await message.answer("üîó –î–æ–±–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É (–∏–ª–∏ /skip):")

@dp.message(AddGift.link)
async def add_gift_link(message: types.Message, state: FSMContext):
    if message.text != "/skip":
        await state.update_data(link=message.text)
    await state.set_state(AddGift.photo)
    await message.answer("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–æ–¥–∞—Ä–∫–∞ (–∏–ª–∏ /skip):")

@dp.message(AddGift.photo, F.text == "/skip")
async def add_gift_no_photo(message: types.Message, state: FSMContext):
    await state.update_data(photo_id=None)
    await save_gift(message, state)

@dp.message(AddGift.photo, F.photo)
async def add_gift_photo(message: types.Message, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo_id=photo_id)
    await save_gift(message, state)

@dp.message(AddGift.photo)
async def handle_invalid_photo_input(message: types.Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –ø–æ–¥–∞—Ä–∫–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /skip")

async def save_gift(message: types.Message, state: FSMContext):
    data = await state.get_data()
    cursor.execute('''
    INSERT INTO gifts (user_id, name, description, link, photo_id)
    VALUES (?, ?, ?, ?, ?)
    ''', (message.from_user.id, data['name'], data.get('description'), data.get('link'), data.get('photo_id')))
    conn.commit()
    
    partner_id = get_partner_id(message.from_user.id)
    if partner_id:
        try:
            await bot.send_message(
                partner_id,
                f"üéÅ –í–∞—à –ø–∞—Ä—Ç–Ω–µ—Ä –¥–æ–±–∞–≤–∏–ª –Ω–æ–≤—ã–π –ø–æ–¥–∞—Ä–æ–∫: <b>{data['name']}</b>"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
    
    await state.clear()
    await message.answer("‚úÖ –ü–æ–¥–∞—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=main_keyboard())

@dp.message(F.text == "üéÅ –ú–æ–π —Å–ø–∏—Å–æ–∫")
async def show_my_gifts(message: types.Message):
    gifts = get_gifts(message.from_user.id)
    if not gifts:
        await message.answer("–í–∞—à —Å–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ –ø—É—Å—Ç.")
        return
    
    for gift in gifts:
        gift_id, name, desc, link, photo_id = gift
        text = f"üéÅ <b>{name}</b> (ID: {gift_id})\n"
        if desc:
            text += f"üìù {desc}\n"
        if link:
            text += f"üîó <a href='{link}'>–°—Å—ã–ª–∫–∞</a>\n"
        
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_{gift_id}")],
            [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_{gift_id}")]
        ])
        
        if photo_id:
            await message.answer_photo(
                photo_id,
                caption=text,
                reply_markup=kb
            )
        else:
            await message.answer(
                text,
                reply_markup=kb
            )

@dp.message(F.text == "üëÄ –°–ø–∏—Å–æ–∫ –ª—é–±–∏–º–∫–∏")
async def show_partner_gifts(message: types.Message):
    partner_id = get_partner_id(message.from_user.id)
    if not partner_id:
        await message.answer("‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ª—é–±–∏–º–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–µ")
        return
    
    gifts = get_gifts(partner_id)
    if not gifts:
        await message.answer("–°–ø–∏—Å–æ–∫ –ø–æ–¥–∞—Ä–∫–æ–≤ –≤–∞—à–µ–π –ª—é–±–∏–º–∫–∏ –ø–æ–∫–∞ –ø—É—Å—Ç")
        return
    
    for gift in gifts:
        gift_id, name, desc, link, photo_id = gift
        text = f"üéÅ <b>{name}</b>\n"
        if desc:
            text += f"üìù {desc}\n"
        if link:
            text += f"üîó <a href='{link}'>–°—Å—ã–ª–∫–∞</a>\n"
        
        if photo_id:
            await message.answer_photo(
                photo_id,
                caption=text
            )
        else:
            await message.answer(text)

@dp.callback_query(F.data.startswith("delete_"))
async def delete_gift(call: types.CallbackQuery):
    gift_id = call.data.split("_")[1]
    cursor.execute("DELETE FROM gifts WHERE id = ?", (gift_id,))
    conn.commit()
    await call.message.delete()
    await call.message.answer("‚úÖ –ü–æ–¥–∞—Ä–æ–∫ —É–¥–∞–ª–µ–Ω!", reply_markup=main_keyboard())

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =====
def is_user_registered(user_id):
    cursor.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    return cursor.fetchone() is not None

def get_partner_id(user_id):
    cursor.execute("SELECT partner_id FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    return result[0] if result else None

def get_gifts(user_id):
    cursor.execute("SELECT id, name, description, link, photo_id FROM gifts WHERE user_id = ?", (user_id,))
    return cursor.fetchall()

# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê –° –ó–ê–©–ò–¢–û–ô –û–¢ –ö–û–ù–§–õ–ò–ö–¢–û–í =====
async def on_startup():
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    session = await bot.get_session()
    await session.close()
    
    # –£–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –∏ —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await bot.delete_webhook(drop_pending_updates=True)
    logger.info("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")

async def on_shutdown():
    await (await bot.get_session()).close()
    conn.close()
    logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –ø–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
        await asyncio.sleep(5)
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
    finally:
        await on_shutdown()

if __name__ == "__main__":
    # –î–ª—è Replit - –¥–æ–±–∞–≤–ª—è–µ–º keep_alive
    from flask import Flask
    from threading import Thread

    app = Flask(__name__)

    @app.route('/')
    def home(): return "Bot is alive!"

    Thread(target=lambda: app.run(host='0.0.0.0', port=8080)).start()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    asyncio.run(main())
